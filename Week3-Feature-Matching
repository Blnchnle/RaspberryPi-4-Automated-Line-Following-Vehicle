import cv2
import numpy as np
from picamera2 import Picamera2

TEMPLATE_PATH = "/home/user/PICTURES/"
templates = {
    "stop_sign": cv2.imread(TEMPLATE_PATH + "stop_sign.png", 0),
    "face": cv2.imread(TEMPLATE_PATH + "face.png", 0),
    "distance_sign": cv2.imread(TEMPLATE_PATH + "distance_sign.png", 0),
    "tfl": cv2.imread(TEMPLATE_PATH + "tfl.png", 0),
}

thresholds = {
    "stop_sign": 0.35,
    "face": 0.3,
    "distance_sign": 0.3,
    "tfl": 0.3,
}

def initialize_camera():
    picam2 = Picamera2()
    config = picam2.create_preview_configuration({"format": "RGB888", "size": (640, 480)})
    picam2.configure(config)
    picam2.start()
    return picam2

def capture_frame(picam2):
    try:
        frame = picam2.capture_array()
        if frame is None or frame.size == 0:
            return None
        return frame
    except:
        return None

def preprocess_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)
    return edges

def detect_templates(frame):
    gray_frame = preprocess_image(frame)
    best_label = None
    best_value = 1
    for label, template in templates.items():
        if template is None:
            continue
        template_edges = cv2.Canny(template, 50, 150)
        w, h = template.shape[::-1]
        result = cv2.matchTemplate(gray_frame, template_edges, cv2.TM_SQDIFF_NORMED)
        min_val, _, min_loc, _ = cv2.minMaxLoc(result)
        threshold = thresholds.get(label, 0.4)
        if min_val < threshold and min_val < best_value:
            best_value = min_val
            best_label = label
            top_left = min_loc
            bottom_right = (top_left[0] + w, top_left[1] + h)
            cv2.rectangle(frame, top_left, bottom_right, (0, 255, 0), 2)
            cv2.putText(frame, f"{best_label}", (top_left[0], top_left[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    return best_label

def get_arrow_direction(cnt, approx):
    M = cv2.moments(cnt)
    if M["m00"] == 0:
        return None
    cx = int(M["m10"] / M["m00"])
    cy = int(M["m01"] / M["m00"])
    distances = [np.sqrt((pt[0][0] - cx)**2 + (pt[0][1] - cy)**2) for pt in approx]
    head_idx = np.argmax(distances)
    head_pt = approx[head_idx][0]
    dx = head_pt[0] - cx
    dy = head_pt[1] - cy
    if abs(dx) > abs(dy):
        return "Right" if dx > 10 else "Left"
    else:
        return "Down" if dy > 10 else "Up"
    
def detect_shapes(frame, min_area=500):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)
    contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area < min_area:
            continue
        approx = cv2.approxPolyDP(cnt, 0.03 * cv2.arcLength(cnt, True), True)
        shape = None
        direction = None
        if len(approx) == 7:
            direction = get_arrow_direction(cnt, approx)
            if direction:
                shape = f"Arrow ({direction})"
        elif len(approx) == 3:
            shape = "Triangle"
        elif len(approx) == 4:
            shape = "Rectangle"
        elif len(approx) == 5:
            shape = "Pentagon"
        elif len(approx) == 6:
            shape = "Hexagon"
        else:
            (x, y), radius = cv2.minEnclosingCircle(cnt)
            if 0.8 * np.pi * (radius ** 2) <= area <= 1.2 * np.pi * (radius ** 2):
                shape = "Circle"
            elif 0.65 * np.pi * (radius ** 2) <= area <= 0.75 * np.pi * (radius ** 2):
                shape = "3/4 Circle"
        if shape:
            cv2.drawContours(frame, [approx], 0, (255, 0, 0), 2)
            x, y = approx[0][0]
            cv2.putText(frame, shape, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

def main():
    picam2 = initialize_camera()
    try:
        while True:
            frame = capture_frame(picam2)
            if frame is None:
                continue
            match_label = detect_templates(frame)
            if not match_label:
                detect_shapes(frame)
            cv2.imshow("Detection", frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
    except KeyboardInterrupt:
        pass
    finally:
        picam2.stop()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
